{"version":3,"sources":["components/TypeWriter.js","components/Avatar.js","components/SocialIcon.js","App.js","serviceWorker.js","index.js"],"names":["TypeWriter","list","className","onInit","typewriter","typeString","pauseFor","deleteAll","changeDeleteSpeed","deleteChars","length","start","options","autoStart","loop","Avatar","aria-label","tiltMaxAngleX","tiltMaxAngleY","glareEnable","id","src","this","props","Component","SocialIcon","social","href","url","data-tip","message","target","startsWith","icon","size","color","particlesParams","require","Social","name","Author","image","faGoogle","faGithub","faMedium","faLinkedin","App","window","innerWidth","innerHeight","particles","number","value","params","role","duration","aria-level","icons","forEach","s","push","createSocialIcons","place","type","effect","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kdAmCeA,MAhCf,WACI,IAAMC,EAAO,CAAC,mBAAoB,gBAAiB,iCAEnD,OACI,yBAAKC,UAAU,cACX,kBAAC,IAAD,CACIC,OAAQ,SAACC,GACLA,EAAWC,WAAW,iBACjBC,SANJ,KAOIC,YACAF,WAAW,SACXG,kBAAkB,GAClBH,WAAWJ,EAAK,IAChBK,SAXJ,KAYIG,YAAYR,EAAK,GAAGS,QACpBL,WAAWJ,EAAK,IAChBK,SAdJ,KAeIG,YAAYR,EAAK,GAAGS,QACpBL,WAAWJ,EAAK,IAChBK,SAjBJ,KAkBIG,YAAYR,EAAK,GAAGS,QACpBC,SAETC,QAAS,CACLC,WAAW,EACXC,MAAM,O,iDCRXC,E,iLAZP,OACI,yBAAKb,UAAU,OAAOc,aAAW,UAC7B,kBAAC,IAAD,CAAMC,cAAe,GAAIC,cAAe,GAAIC,aAAa,GACrD,6BAASC,GAAG,UACR,kBAAC,IAAD,CAAKlB,UAAU,SAASmB,IAAKC,KAAKC,MAAMF,a,GAP3CG,a,QCWNC,E,iLAXP,IAAMC,EAASJ,KAAKC,MAAMG,OAC1B,OACI,uBAAGC,KAAMD,EAAOE,IAAK1B,UAAU,OAAO2B,WAAUH,EAAOI,QACpDC,OAAQL,EAAOE,IAAII,WAAW,QAAU,SAAW,SAClD,kBAAC,IAAD,CAAiBC,KAAMP,EAAOO,KAAMC,KAAM,KACzBC,MAAM,e,GAPdX,a,kCCOnBY,EAAkBC,EAAQ,IAE1BC,EACF,WAAYC,EAAMX,EAAKK,EAAMH,GAAU,oBACnCR,KAAKiB,KAAOA,EACZjB,KAAKM,IAAMA,EACXN,KAAKW,KAAOA,EACZX,KAAKQ,QAAUA,GAIjBU,EAAS,CACXD,KAAM,kBACNE,MAAO,8DACPf,OAAQ,CACJ,IAAIY,EAAO,QAAS,mCAAoCI,IAAU,cAClE,IAAIJ,EAAO,SAAU,iCAAkCK,IAAU,eACjE,IAAIL,EAAO,SAAU,qCAAsCM,IAAU,cACrE,IAAIN,EAAO,WAAY,yDAA0DO,IAAY,a,IAsDtFC,E,iLAjCP,OAJIC,OAAOC,WAAaD,OAAOE,cAC3Bb,EAAgBc,UAAUC,OAAOC,MAAQ,IAIzC,6BACI,kBAAC,IAAD,CAAWlD,UAAU,wBAAwBmD,OAAQjB,IACrD,yBAAKlC,UAAU,eACX,yBAAKA,UAAU,wCAAwCoD,KAAK,QACxD,kBAAC,EAAD,CAAQjC,IAAKmB,EAAOC,QACpB,yBAAKvC,UAAU,kCACX,6BAASkB,GAAG,MAAMJ,aAAW,aACzB,kBAAC,IAAD,CAAcuC,SAAU,MACpB,wBAAIrD,UAAU,UAAUsD,aAAW,IAAIxC,aAAW,QAAlD,oBAIJ,wBAAId,UAAU,WAAd,qBAEJ,iCACI,wBAAIA,UAAU,WAAWkB,GAAG,cAAa,kBAAC,EAAD,QAE7C,iCACI,yBAAKlB,UAAU,QAAQc,aAAW,SApClE,WACI,IAAIyC,EAAQ,GAIZ,OAHAjB,EAAOd,OAAOgC,QAAQ,SAAAC,GAClBF,EAAMG,KAAK,kBAAC,EAAD,CAAYlC,OAAQiC,OAE5BF,EAgC0BI,GACD,kBAAC,IAAD,CAAcC,MAAM,SAASC,KAAK,QAAQC,OAAO,oB,GA7BnExC,aC7BEyC,QACW,cAA7BlB,OAAOmB,SAASC,UAEe,UAA7BpB,OAAOmB,SAASC,UAEhBpB,OAAOmB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c8726611.chunk.js","sourcesContent":["import React from 'react';\r\nimport Typewriter from 'typewriter-effect';\r\n\r\nfunction TypeWriter() {\r\n    const list = ['Prashant Barahi;', '@realpacific;', 'Full-Stack Software Engineer;'];\r\n    const duration = 200;\r\n    return (\r\n        <div className=\"Typewriter\">\r\n            <Typewriter\r\n                onInit={(typewriter) => {\r\n                    typewriter.typeString('Hello, World!')\r\n                        .pauseFor(duration)\r\n                        .deleteAll()\r\n                        .typeString('I am ')\r\n                        .changeDeleteSpeed(1)\r\n                        .typeString(list[0])\r\n                        .pauseFor(duration)\r\n                        .deleteChars(list[0].length)\r\n                        .typeString(list[1])\r\n                        .pauseFor(duration)\r\n                        .deleteChars(list[1].length)\r\n                        .typeString(list[2])\r\n                        .pauseFor(duration)\r\n                        .deleteChars(list[2].length)\r\n                        .start();\r\n                }}\r\n                options={{\r\n                    autoStart: true,\r\n                    loop: true,\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TypeWriter;\r\n","import React, {Component} from 'react';\r\nimport Img from 'react-image';\r\nimport Tilt from \"react-parallax-tilt\";\r\n\r\n\r\nclass Avatar extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"item\" aria-label=\"Avatar\">\r\n                <Tilt tiltMaxAngleX={10} tiltMaxAngleY={10} glareEnable={true}>\r\n                    <section id=\"avatar\">\r\n                        <Img className=\"avatar\" src={this.props.src}/>\r\n                    </section>\r\n                </Tilt>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Avatar\r\n","import {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport React, {Component} from 'react';\r\n\r\nclass SocialIcon extends Component {\r\n    render() {\r\n        const social = this.props.social;\r\n        return (\r\n            <a href={social.url} className=\"icon\" data-tip={social.message}\r\n               target={social.url.startsWith('http') ? '_blank' : '_self'}>\r\n                <FontAwesomeIcon icon={social.icon} size={\"2x\"}\r\n                                 color=\"white\"/></a>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default SocialIcon\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport TypeWriter from \"./components/TypeWriter\";\nimport {faGithub, faGoogle, faLinkedin, faMedium} from '@fortawesome/free-brands-svg-icons'\nimport ReactTooltip from 'react-tooltip'\nimport Avatar from \"./components/Avatar\";\nimport SocialIcon from \"./components/SocialIcon\";\nimport Particles from 'react-particles-js';\nimport GlitchEffect from 'react-glitch-effect';\n\nconst particlesParams = require('./config/particles')\n\nclass Social {\n    constructor(name, url, icon, message) {\n        this.name = name;\n        this.url = url;\n        this.icon = icon;\n        this.message = message;\n    }\n}\n\nconst Author = {\n    name: \"PRASHANT BARAHI\",\n    image: \"https://avatars3.githubusercontent.com/u/25506584?s=460&v=4\",\n    social: [\n        new Social(\"Gmail\", \"mailto: prashantbarahi@gmail.com\", faGoogle, \"Contact me\"),\n        new Social(\"GitHub\", \"https://github.com/realpacific\", faGithub, \"Fork GitHub\"),\n        new Social(\"Medium\", \"https://medium.com/@prashantbarahi\", faMedium, \"Read blogs\"),\n        new Social(\"LinkedIn\", \"https://www.linkedin.com/in/prashant-barahi-b83438139/\", faLinkedin, \"Find me\"),\n    ]\n}\n\nfunction createSocialIcons() {\n    let icons = [];\n    Author.social.forEach(s => {\n        icons.push(<SocialIcon social={s}/>);\n    });\n    return icons;\n}\n\n\nclass App extends Component {\n\n\n    render() {\n        if (window.innerWidth < window.innerHeight) {\n            particlesParams.particles.number.value = 20;\n        }\n\n        return (\n            <div>\n                <Particles className=\"landingpage particles\" params={particlesParams}/>\n                <div className=\"landingpage\">\n                    <div className=\"grid-container autocenter fivetoseven\" role=\"main\">\n                        <Avatar src={Author.image}/>\n                        <div className=\"grid-container full autocenter\">\n                            <section id=\"bio\" aria-label=\"Biography\">\n                                <GlitchEffect duration={'2s'}>\n                                    <h1 className=\"h3-like\" aria-level=\"1\" aria-label=\"Name\">\n                                        PRASHANT BARAHI\n                                    </h1>\n                                </GlitchEffect>\n                                <h5 className='h3-like'>Kathmandu, Nepal</h5>\n                            </section>\n                            <section>\n                                <h5 className=\"App-code\" id=\"typewriter\"><TypeWriter/></h5>\n                            </section>\n                            <section>\n                                <div className=\"icons\" aria-label=\"Links\">\n                                    {createSocialIcons()}\n                                    <ReactTooltip place=\"bottom\" type=\"light\" effect=\"solid\"/>\n                                </div>\n                            </section>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}